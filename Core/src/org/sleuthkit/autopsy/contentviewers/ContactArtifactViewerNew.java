/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.contentviewers;

import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JScrollPane;
import org.apache.commons.lang.StringUtils;
import org.openide.util.NbBundle;
import org.openide.util.lookup.ServiceProvider;
import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoAccount;
import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoException;
import org.sleuthkit.autopsy.centralrepository.datamodel.Persona;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.datamodel.AbstractFile;
import org.sleuthkit.datamodel.BlackboardArtifact;
import org.sleuthkit.datamodel.BlackboardAttribute;
import org.sleuthkit.datamodel.Content;
import org.sleuthkit.datamodel.TskCoreException;

/**
 *
 * @author raman
 */
@ServiceProvider(service = ArtifactContentViewer.class)
public class ContactArtifactViewerNew extends javax.swing.JPanel implements ArtifactContentViewer {

    private final static Logger logger = Logger.getLogger(ContactArtifactViewer.class.getName());
    private static final long serialVersionUID = 1L;
    
    private GridBagLayout m_gridBagLayout = new GridBagLayout();
    private GridBagConstraints m_constraints = new GridBagConstraints();
    
     // contact name, if available.
    private String contactName; // TBD: is this really needed as class member?
    
    //private javax.swing.JLabel contactImage; // TBD: is this really needed as class member?
    
    private final static String DEFAULT_IMAGE_PATH = "/org/sleuthkit/autopsy/images/defaultContact.png";
    private final ImageIcon defaultImage;

    // A list of unique accounts matching the attributes of the contact artifact.
    private final List<CentralRepoAccount> contactUniqueAccountsList = new ArrayList<>();

    // A list of all unique personas and their account, found by searching on the 
    // account identifier attributes of the Contact artifact.
    private final Map<Persona, ArrayList<CentralRepoAccount>> contactUniquePersonasMap = new HashMap<>();

   
    /**
     * Creates new form ContactArtifactViewerNew
     */
    public ContactArtifactViewerNew() {
        initComponents();
        
        defaultImage = new ImageIcon(ContactArtifactViewer.class.getResource(DEFAULT_IMAGE_PATH));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setToolTipText("RAMAN RAMAN RAMAN RAMAN RAMAN "); // NOI18N
        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void setArtifact(BlackboardArtifact artifact) {
        // Reset the panel.
        resetComponent();

        if (artifact == null) {
            return;
        }

        List<BlackboardAttribute> phoneNumList = new ArrayList<>();
        List<BlackboardAttribute> emailList = new ArrayList<>();
        List<BlackboardAttribute> nameList = new ArrayList<>();
        List<BlackboardAttribute> otherList = new ArrayList<>();
        List<BlackboardAttribute> accountAttributesList = new ArrayList<>();

        try {
            // Get all the attributes and group them by the section panels they go in
            for (BlackboardAttribute bba : artifact.getAttributes()) {
                if (bba.getAttributeType().getTypeName().startsWith("TSK_PHONE")) {
                    phoneNumList.add(bba);
                    accountAttributesList.add(bba);
                } else if (bba.getAttributeType().getTypeName().startsWith("TSK_EMAIL")) {
                    emailList.add(bba);
                    accountAttributesList.add(bba);
                } else if (bba.getAttributeType().getTypeName().startsWith("TSK_NAME")) {
                    nameList.add(bba);
                } else {
                    otherList.add(bba);
                    if (bba.getAttributeType().getTypeName().equalsIgnoreCase("TSK_ID")) {
                        accountAttributesList.add(bba);
                    }
                }
            }
        } catch (TskCoreException ex) {
            logger.log(Level.SEVERE, String.format("Error getting attributes for artifact (artifact_id=%d, obj_id=%d)", artifact.getArtifactID(), artifact.getObjectID()), ex);
        }
        
        
        updateContactImage(artifact);
        
        // update name section
        updateContactName(nameList);

        
        // repaint
        this.revalidate();
        this.repaint();
    }

    @Override
    public Component getComponent() {
        // Slap a vertical scrollbar on the panel.
        return this;
        //return new JScrollPane(this, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
    }

    @Override
    public boolean isSupported(BlackboardArtifact artifact) {
        return artifact.getArtifactTypeID() == BlackboardArtifact.ARTIFACT_TYPE.TSK_CONTACT.getTypeID();
    }

    
    /**
     * Updates the contact name in the view.
     *
     * @param attributesList
     */
    @NbBundle.Messages({
        "ContactArtifactViewer.contactImage.text=RAMAN",
    })
    private void updateContactImage(BlackboardArtifact artifact) {
        
        javax.swing.JLabel contactImage = new javax.swing.JLabel();
        
        contactImage.setIcon(getImageFromArtifact(artifact));
        
        contactImage.setText(Bundle.ContactArtifactViewer_contactImage_text());
        
        CommunicationArtifactViewerHelper.addComponent(this, m_gridBagLayout, this.m_constraints, contactImage);
        m_constraints.gridy++;
        
    }
    
    /**
     * Updates the contact name in the view from the list of attributes.
     *
     * @param attributesList List of attributes that might have the contact name.
     */
    private void updateContactName(List<BlackboardAttribute> nameAttributesList) {
        for (BlackboardAttribute bba : nameAttributesList) {
            if (StringUtils.isEmpty(bba.getValueString()) == false) {
                contactName = bba.getDisplayString();
                
                CommunicationArtifactViewerHelper.addHeader(this, m_gridBagLayout, this.m_constraints, contactName);
                break;
            }
        }
    }
    
    /**
     * Resets all artifact specific state.
     */
    private void resetComponent() {

        contactName = null;
        contactUniqueAccountsList.clear();
        contactUniquePersonasMap.clear();
        
        //contactImage.setIcon(defaultImage);
        
        
        // clear the panel 
        this.removeAll();
        this.setLayout(null);

        m_gridBagLayout = new GridBagLayout();
        m_constraints = new GridBagConstraints();

        m_constraints.anchor = GridBagConstraints.FIRST_LINE_START;
        m_constraints.gridy = 0;
        m_constraints.gridx = 0;
        m_constraints.weighty = 0.05;
        m_constraints.weightx = 0.05;
        m_constraints.insets = new java.awt.Insets(0, 0, 0, 0);
        m_constraints.fill = GridBagConstraints.NONE;

    }
    
    /**
     * Gets an image from a TSK_CONTACT artifact.
     *
     * @param artifact
     *
     * @return Image from a TSK_CONTACT artifact or default image if none was
     *         found or the artifact is not a TSK_CONTACT
     */
    private ImageIcon getImageFromArtifact(BlackboardArtifact artifact) {
        ImageIcon imageIcon = defaultImage;

        if (artifact == null) {
            return imageIcon;
        }

        BlackboardArtifact.ARTIFACT_TYPE artifactType = BlackboardArtifact.ARTIFACT_TYPE.fromID(artifact.getArtifactTypeID());
        if (artifactType != BlackboardArtifact.ARTIFACT_TYPE.TSK_CONTACT) {
            return imageIcon;
        }

        try {
            for (Content content : artifact.getChildren()) {
                if (content instanceof AbstractFile) {
                    AbstractFile file = (AbstractFile) content;

                    try {
                        BufferedImage image = ImageIO.read(new File(file.getLocalAbsPath()));
                        imageIcon = new ImageIcon(image);
                        break;
                    } catch (IOException ex) {
                        // ImageIO.read will through an IOException if file is not an image
                        // therefore we don't need to report this exception just try
                        // the next file.
                    }
                }
            }
        } catch (TskCoreException ex) {
            logger.log(Level.WARNING, String.format("Unable to load image for contact: %d", artifact.getId()), ex);
        }

        return imageIcon;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
