/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.contentviewers;

import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.stream.Collectors;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingWorker;
import org.apache.commons.lang.StringUtils;
import org.openide.util.NbBundle;
import org.openide.util.lookup.ServiceProvider;
import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoAccount;
import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepoException;
import org.sleuthkit.autopsy.centralrepository.datamodel.CentralRepository;
import org.sleuthkit.autopsy.centralrepository.datamodel.Persona;
import org.sleuthkit.autopsy.centralrepository.datamodel.PersonaAccount;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.datamodel.AbstractFile;
import org.sleuthkit.datamodel.BlackboardArtifact;
import org.sleuthkit.datamodel.BlackboardAttribute;
import org.sleuthkit.datamodel.Content;
import org.sleuthkit.datamodel.TskCoreException;

/**
 *
 * @author raman
 */
@ServiceProvider(service = ArtifactContentViewer.class)
public class ContactArtifactViewerNew extends javax.swing.JPanel implements ArtifactContentViewer {

    private final static Logger logger = Logger.getLogger(ContactArtifactViewer.class.getName());
    private static final long serialVersionUID = 1L;
    
    private GridBagLayout m_gridBagLayout = new GridBagLayout();
    private GridBagConstraints m_constraints = new GridBagConstraints();
    
     // contact name, if available.
    private String contactName; // TBD: is this really needed as class member?
    
    //private javax.swing.JLabel contactImage; // TBD: is this really needed as class member?
    
    private final static String DEFAULT_IMAGE_PATH = "/org/sleuthkit/autopsy/images/defaultContact.png";
    private final ImageIcon defaultImage;

    // A list of unique accounts matching the attributes of the contact artifact.
    private final List<CentralRepoAccount> contactUniqueAccountsList = new ArrayList<>();

    // A list of all unique personas and their account, found by searching on the 
    // account identifier attributes of the Contact artifact.
    private final Map<Persona, ArrayList<CentralRepoAccount>> contactUniquePersonasMap = new HashMap<>();

    privbate ContactPersonaSearcherTask personaSearchTask;
   
    /**
     * Creates new form ContactArtifactViewerNew
     */
    public ContactArtifactViewerNew() {
        initComponents();
        
        defaultImage = new ImageIcon(ContactArtifactViewer.class.getResource(DEFAULT_IMAGE_PATH));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setToolTipText(""); // NOI18N
        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void setArtifact(BlackboardArtifact artifact) {
        // Reset the panel.
        resetComponent();

        if (artifact == null) {
            return;
        }

        List<BlackboardAttribute> phoneNumList = new ArrayList<>();
        List<BlackboardAttribute> emailList = new ArrayList<>();
        List<BlackboardAttribute> nameList = new ArrayList<>();
        List<BlackboardAttribute> otherList = new ArrayList<>();
        List<BlackboardAttribute> accountAttributesList = new ArrayList<>();
        String datasourceName;

        try {
            // Get all the attributes and group them by the section panels they go in
            for (BlackboardAttribute bba : artifact.getAttributes()) {
                if (bba.getAttributeType().getTypeName().startsWith("TSK_PHONE")) {
                    phoneNumList.add(bba);
                    accountAttributesList.add(bba);
                } else if (bba.getAttributeType().getTypeName().startsWith("TSK_EMAIL")) {
                    emailList.add(bba);
                    accountAttributesList.add(bba);
                } else if (bba.getAttributeType().getTypeName().startsWith("TSK_NAME")) {
                    nameList.add(bba);
                } else {
                    otherList.add(bba);
                    if (bba.getAttributeType().getTypeName().equalsIgnoreCase("TSK_ID")) {
                        accountAttributesList.add(bba);
                    }
                }
            }
            
            datasourceName = artifact.getDataSource().getName();
        } catch (TskCoreException ex) {
            logger.log(Level.SEVERE, String.format("Error getting attributes for artifact (artifact_id=%d, obj_id=%d)", artifact.getArtifactID(), artifact.getObjectID()), ex);
            return;
        }
        
        
        updateContactImage(artifact);
        
        // update name section
        updateContactName(nameList);

        // update contact attributes sections
        updateSection(phoneNumList, "Phones");
        updateSection(emailList, "Emails");
        updateSection(otherList, "Others");
        
        updateSource(datasourceName);
        
        CommunicationArtifactViewerHelper.addPageEndGlue(this, m_gridBagLayout, this.m_constraints);
         
        // repaint
        this.setLayout(m_gridBagLayout);
        this.revalidate();
        this.repaint();
    }

    @Override
    public Component getComponent() {
        // Slap a vertical scrollbar on the panel.
        return new JScrollPane(this, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
    }

    @Override
    public boolean isSupported(BlackboardArtifact artifact) {
        return artifact.getArtifactTypeID() == BlackboardArtifact.ARTIFACT_TYPE.TSK_CONTACT.getTypeID();
    }

    
    /**
     * Updates the contact image in the view.
     *
     * @param artifact
     */
    @NbBundle.Messages({
        "ContactArtifactViewer.contactImage.text=",
    })
    private void updateContactImage(BlackboardArtifact artifact) {
        
        javax.swing.JLabel contactImage = new javax.swing.JLabel();
        
        contactImage.setIcon(getImageFromArtifact(artifact));
        
        contactImage.setText(Bundle.ContactArtifactViewer_contactImage_text());
        
        // add image to top left corner of the page.
        CommunicationArtifactViewerHelper.addComponent(this, m_gridBagLayout, this.m_constraints, contactImage);
        m_constraints.gridy++;

    }
    
    /**
     * Updates the contact name in the view from the list of attributes.
     *
     * @param attributesList List of attributes that might have the contact name.
     */
    @NbBundle.Messages({
        "ContactArtifactViewer_contactname_unknown=Unknown",
    })
    private void updateContactName(List<BlackboardAttribute> nameAttributesList) {
        boolean foundName = false;
        for (BlackboardAttribute bba : nameAttributesList) {
            if (StringUtils.isEmpty(bba.getValueString()) == false) {
                contactName = bba.getDisplayString();
                
                // TBD: need to increase the font size of the page header by 2
                CommunicationArtifactViewerHelper.addHeader(this, m_gridBagLayout, this.m_constraints, contactName);
                foundName = true; 
                break;
            }
        }
        if (foundName== false) {
             CommunicationArtifactViewerHelper.addHeader(this, m_gridBagLayout, this.m_constraints, Bundle.ContactArtifactViewer_contactname_unknown());
        }
    }
    
     /**
     * Updates the view by displaying the given list of attributes in the given
     * section panel.
     *
     * @param sectionAttributesList list of attributes to display.
     * @param sectionLabel          section name label.
     */
    private void updateSection(List<BlackboardAttribute> sectionAttributesList, String sectionHeader) {

        // If there are no attributes for this section, do nothing
        if (sectionAttributesList.isEmpty()) {
            return;
        }

        CommunicationArtifactViewerHelper.addHeader(this, m_gridBagLayout, this.m_constraints, sectionHeader);
        for (BlackboardAttribute bba : sectionAttributesList) {
            CommunicationArtifactViewerHelper.addKey(this, m_gridBagLayout, m_constraints, bba.getAttributeType().getDisplayName());
            CommunicationArtifactViewerHelper.addValue(this, m_gridBagLayout, m_constraints, bba.getDisplayString());
        }
    }
    
    @NbBundle.Messages({
        "ContactArtifactViewer_heading_Source=Source",
        "ContactArtifactViewer_label_datasource=Data Source",})
    private void updateSource(String datasourceName) {
        CommunicationArtifactViewerHelper.addHeader(this, m_gridBagLayout, this.m_constraints, Bundle.ContactArtifactViewer_heading_Source());
        CommunicationArtifactViewerHelper.addKey(this, m_gridBagLayout, this.m_constraints, Bundle.ContactArtifactViewer_label_datasource());
        CommunicationArtifactViewerHelper.addValue(this, m_gridBagLayout, this.m_constraints, datasourceName);
    }
    
     /**
     * Kicks off a search for personas, based in the given list of attributes.
     *
     * @param accountAttributesList a list of account identifying attributes.
     *
     * @throws CentralRepoException
     */
    @NbBundle.Messages({
        "ContactArtifactViewer_persona_searching= Persona",
        "ContactArtifactViewer_persona_searching= Searching...",
        "ContactArtifactViewer_persona_unknown=Unknown"
    })
    private void initiatePersonasSearch(List<BlackboardAttribute> accountAttributesList) throws CentralRepoException {

        JLabel personaHeader = CommunicationArtifactViewerHelper.addHeader(this, m_gridBagLayout, this.m_constraints, Bundle.ContactArtifactViewer_persona_searching());
        
        //CommunicationArtifactViewerHelper.addKey(this, m_gridBagLayout, this.m_constraints, Bundle.ContactArtifactViewer_label_datasource());
        
        
        personasLabel.setVisible(true);

        String personaStatusLabelText = CentralRepository.isEnabled() 
                                    ? Bundle.ContactArtifactViewer_persona_searching()
                : Bundle.ContactArtifactViewer_persona_unknown();
        
       

      

    
        if (CentralRepository.isEnabled() ) {
           
            
            // Kick off a background task to serach for personas for the contact
            ContactPersonaSearcherTask personaSearchTask = new ContactPersonaSearcherTask(accountAttributesList);
            personaSearchTask.execute();
        } else {
            personaHeader.setEnabled(false);
            
            // RAMAN TBD: add a Unknown diabled label at gridx=1;
        }

       
    }
    
    /**
     * Updates the Persona panel with the gathered persona information.
     */
    private void updatePersonasPanel() {
        // Clear out the panel
        personasPanel.removeAll();

        GridBagLayout gridBagLayout = new GridBagLayout();
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.anchor = GridBagConstraints.FIRST_LINE_START;
        constraints.gridx = 0;
        constraints.gridy = 0;
        constraints.insets = new java.awt.Insets(TOP_INSET, LEFT_INSET, 0, 0);

        if (contactUniquePersonasMap.isEmpty()) {
            showPersona(null, Collections.emptyList(), gridBagLayout, constraints);
        } else {
            for (Map.Entry<Persona, ArrayList<CentralRepoAccount>> entry : contactUniquePersonasMap.entrySet()) {
                List<CentralRepoAccount> missingAccounts = new ArrayList<>();
                ArrayList<CentralRepoAccount> personaAccounts = entry.getValue();

                // create a list of accounts missing from this persona
                for (CentralRepoAccount account : contactUniqueAccountsList) {
                    if (personaAccounts.contains(account) == false) {
                        missingAccounts.add(account);
                    }
                }

                showPersona(entry.getKey(), missingAccounts, gridBagLayout, constraints);

                constraints.gridy += 2;
            }
        }

        personasPanel.setLayout(gridBagLayout);
        personasPanel.setSize(personasPanel.getPreferredSize());
        personasPanel.revalidate();
        personasPanel.repaint();
    }
    
    /**
     * Resets all artifact specific state.
     */
    private void resetComponent() {

        contactName = null;
        contactUniqueAccountsList.clear();
        contactUniquePersonasMap.clear();
        
        if (personaSearchTask != null) {
            personaSearchTask.cancel();
        }
        
        personaSearchTask - mull;
        
        // clear the panel 
        this.removeAll();
        this.setLayout(null);

        m_gridBagLayout = new GridBagLayout();
        m_constraints = new GridBagConstraints();

        m_constraints.anchor = GridBagConstraints.FIRST_LINE_START;
        m_constraints.gridy = 0;
        m_constraints.gridx = 0;
        m_constraints.weighty = 0.05;
        m_constraints.weightx = 0.05;
        m_constraints.insets = new java.awt.Insets(0, 0, 0, 0);
        m_constraints.fill = GridBagConstraints.NONE;
    }
    
    /**
     * Gets an image from a TSK_CONTACT artifact.
     *
     * @param artifact
     *
     * @return Image from a TSK_CONTACT artifact or default image if none was
     *         found or the artifact is not a TSK_CONTACT
     */
    private ImageIcon getImageFromArtifact(BlackboardArtifact artifact) {
        ImageIcon imageIcon = defaultImage;

        if (artifact == null) {
            return imageIcon;
        }

        BlackboardArtifact.ARTIFACT_TYPE artifactType = BlackboardArtifact.ARTIFACT_TYPE.fromID(artifact.getArtifactTypeID());
        if (artifactType != BlackboardArtifact.ARTIFACT_TYPE.TSK_CONTACT) {
            return imageIcon;
        }

        try {
            for (Content content : artifact.getChildren()) {
                if (content instanceof AbstractFile) {
                    AbstractFile file = (AbstractFile) content;

                    try {
                        BufferedImage image = ImageIO.read(new File(file.getLocalAbsPath()));
                        imageIcon = new ImageIcon(image);
                        break;
                    } catch (IOException ex) {
                        // ImageIO.read will throw an IOException if file is not an image
                        // therefore we don't need to report this exception just try
                        // the next file.
                    }
                }
            }
        } catch (TskCoreException ex) {
            logger.log(Level.WARNING, String.format("Unable to load image for contact: %d", artifact.getId()), ex);
        }

        return imageIcon;
    }

    
    /**
     * Thread to search for a personas for all account identifier attributes for
     * a contact.
     */
    private class ContactPersonaSearcherTask extends SwingWorker<Map<Persona, ArrayList<CentralRepoAccount>>, Void> {

        private final List<BlackboardAttribute> accountAttributesList;
        private final List<CentralRepoAccount> uniqueAccountsList = new ArrayList<>();

        /**
         * Creates a persona searcher task.
         *
         * @param accountAttributesList List of attributes that may map to
         *                              accounts.
         */
        ContactPersonaSearcherTask(List<BlackboardAttribute> accountAttributesList) {
            this.accountAttributesList = accountAttributesList;
        }

        @Override
        protected Map<Persona, ArrayList<CentralRepoAccount>> doInBackground() throws Exception {

            Map<Persona, ArrayList<CentralRepoAccount>> uniquePersonas = new HashMap<>();

            for (BlackboardAttribute bba : accountAttributesList) {

                // Get account, add to accounts list
                Collection<Persona> personas;

                Collection<CentralRepoAccount> accountCandidates
                        = CentralRepoAccount.getAccountsWithIdentifier(bba.getValueString());

                if (accountCandidates.isEmpty() == false) {
                    CentralRepoAccount account = accountCandidates.iterator().next();
                    if (uniqueAccountsList.contains(account) == false) {
                        uniqueAccountsList.add(account);
                    }

                    // get personas for the account
                    personas = PersonaAccount.getPersonaAccountsForAccount(account.getId())
                            .stream()
                            .map(PersonaAccount::getPersona)
                            .collect(Collectors.toList());

                    // make a list of unique personas, along with all their accounts
                    for (Persona persona : personas) {
                        if (uniquePersonas.containsKey(persona) == false) {
                            Collection<CentralRepoAccount> accounts = persona.getPersonaAccounts()
                                    .stream()
                                    .map(PersonaAccount::getAccount)
                                    .collect(Collectors.toList());

                            ArrayList<CentralRepoAccount> personaAccountsList = new ArrayList<>(accounts);
                            uniquePersonas.put(persona, personaAccountsList);
                        }
                    }
                }

            }

            return uniquePersonas;
        }

        @Override
        protected void done() {

            Map<Persona, ArrayList<CentralRepoAccount>> personasMap;
            try {
                personasMap = super.get();

                if (this.isCancelled()) {
                    return;
                }

                contactUniquePersonasMap.clear();
                contactUniquePersonasMap.putAll(personasMap);
                contactUniqueAccountsList.clear();
                contactUniqueAccountsList.addAll(uniqueAccountsList);

                updatePersonasSection();
                
                // also update the source section now
                

            } catch (CancellationException ex) {
                logger.log(Level.INFO, "Persona searching was canceled."); //NON-NLS
            } catch (InterruptedException ex) {
                logger.log(Level.INFO, "Persona searching was interrupted."); //NON-NLS
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, "Fatal error during Persona search.", ex); //NON-NLS
            }

        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
