/*
 * Autopsy
 *
 * Copyright 2020 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.contentviewers.artifactviewers;

import java.awt.Component;
import java.util.logging.Level;
import javax.swing.JScrollPane;
import org.sleuthkit.autopsy.discovery.ui.AbstractArtifactDetailsPanel;
import org.sleuthkit.datamodel.BlackboardArtifact;
import org.sleuthkit.datamodel.BlackboardAttribute;
import org.sleuthkit.datamodel.TskCoreException;

public class GenericArtifactViewer extends AbstractArtifactDetailsPanel implements ArtifactContentViewer {

    private static final long serialVersionUID = 1L;

    private BlackboardArtifact Artifact;
//    private final atttribute

    /**
     * Creates new form GenericArtifactViewer
     */
    public GenericArtifactViewer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void setArtifact(BlackboardArtifact artifact) {
//        resetComponent();
//        if (artifact != null) {
//            try {
//                extractArtifactData(artifact);
//            } catch (TskCoreException ex) {
//                logger.log(Level.WARNING, "Unable to get attributes for artifact " + artifact.getArtifactID(), ex);
//            }
//            updateView();
//        }
//        this.setLayout(this.gridBagLayout);
//        this.revalidate();
//        this.repaint();
    }

    /**
     * Extracts data from the artifact to be displayed in the panel.
     *
     * @param artifact Artifact to show.
     *
     * @throws TskCoreException
     */
    private void extractArtifactData(BlackboardArtifact artifact) throws TskCoreException {

//        webHistoryArtifact = artifact;
//        artifactAttributesList.addAll(webHistoryArtifact.getAttributes());
//        // Get all the attributes and group them by the section panels they go in
//        for (BlackboardAttribute bba : artifactAttributesList) {
//            if (bba.getAttributeType().getTypeName().startsWith("TSK_URL")) {
//                urlList.add(bba);
//            } else if (bba.getAttributeType().getTypeName().startsWith("TSK_PROG_NAME")) {
//                programNameList.add(bba);
//            } else if (bba.getAttributeType().getTypeName().startsWith("TSK_DOMAIN")) {
//                domainList.add(bba);
//            } else if (bba.getAttributeType().getTypeName().startsWith("TSK_REFERRER")) {
//                referrerUrlList.add(bba);
//            } else if (bba.getAttributeType().getTypeName().startsWith("TSK_DATETIME_ACCESSED")) {
//                dateAccessedList.add(bba);
//            } else if (bba.getAttributeType().getTypeName().startsWith("TSK_TITLE")) {
//                titleList.add(bba);
//            } else {
//                otherList.add(bba);
//            }
//
//        }
//
//        dataSourceName = webHistoryArtifact.getDataSource().getName();
//        sourceFileName = webHistoryArtifact.getParent().getName();
    }

    @Override
    public Component getComponent() {
        // Slap a vertical scrollbar on the panel.
        return new JScrollPane(this, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
    }

    @Override
    public boolean isSupported(BlackboardArtifact artifact) {
        return false; //(artifact != null);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
