/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.discovery;

import java.util.List;
import java.util.logging.Level;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.datamodel.DataSource;
import org.sleuthkit.datamodel.TskCoreException;

/**
 *
 * @author wschaefer
 */
final class DataSourceFilterPanel extends AbstractDiscoveryFiltersPanel {

    private static final long serialVersionUID = 1L;
    private final static Logger logger = Logger.getLogger(DataSourceFilterPanel.class.getName());

    /**
     * Creates new form DataSourceFilterPanel
     */
    DataSourceFilterPanel() {
        initComponents();
        setUpDataSourceFilter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataSourceCheckbox = new javax.swing.JCheckBox();
        dataSourceScrollPane = new javax.swing.JScrollPane();
        dataSourceList = new javax.swing.JList<>();

        org.openide.awt.Mnemonics.setLocalizedText(dataSourceCheckbox, org.openide.util.NbBundle.getMessage(DataSourceFilterPanel.class, "DataSourceFilterPanel.dataSourceCheckbox.text")); // NOI18N
        dataSourceCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataSourceCheckboxActionPerformed(evt);
            }
        });

        setPreferredSize(new java.awt.Dimension(300, 60));

        dataSourceList.setModel(new DefaultListModel<DataSourceItem>());
        dataSourceList.setEnabled(false);
        dataSourceList.setVisibleRowCount(5);
        dataSourceScrollPane.setViewportView(dataSourceList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataSourceScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(dataSourceScrollPane)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dataSourceCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataSourceCheckboxActionPerformed
        dataSourceList.setEnabled(dataSourceCheckbox.isSelected());
    }//GEN-LAST:event_dataSourceCheckboxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox dataSourceCheckbox;
    private javax.swing.JList<DataSourceItem> dataSourceList;
    private javax.swing.JScrollPane dataSourceScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void configurePanel(boolean selected, int[] indicesSelected) {
        dataSourceCheckbox.setSelected(selected);
        if (dataSourceCheckbox.isEnabled() && dataSourceCheckbox.isSelected()) {
            dataSourceScrollPane.setEnabled(true);
            dataSourceList.setEnabled(true);
            if (indicesSelected != null) {
                dataSourceList.setSelectedIndices(indicesSelected);
            }
        } else {
            dataSourceScrollPane.setEnabled(false);
            dataSourceList.setEnabled(false);
        }
    }

    @Override
    public JCheckBox getCheckbox() {
        return dataSourceCheckbox;
    }

    @Override
    public JLabel getAdditionalLabel() {
        return null;
    }

    /**
     * Initialize the data source filter
     */
    private void setUpDataSourceFilter() {
        int count = 0;
        try {
            DefaultListModel<DataSourceItem> dsListModel = (DefaultListModel<DataSourceItem>) dataSourceList.getModel();
            dsListModel.removeAllElements();
            for (DataSource ds : Case.getCurrentCase().getSleuthkitCase().getDataSources()) {
                dsListModel.add(count, new DataSourceItem(ds));
            }
        } catch (TskCoreException ex) {
            logger.log(Level.SEVERE, "Error loading data sources", ex);
            dataSourceCheckbox.setEnabled(false);
            dataSourceList.setEnabled(false);
        }
    }

    @Override
    JList<?> getList() {
        return dataSourceList;
    }

    /**
     * Utility class to allow us to display the data source ID along with the
     * name
     */
    private class DataSourceItem {

        private final DataSource ds;

        DataSourceItem(DataSource ds) {
            this.ds = ds;
        }

        DataSource getDataSource() {
            return ds;
        }

        @Override
        public String toString() {
            return ds.getName() + " (ID: " + ds.getId() + ")";
        }
    }

    @Override
    String checkForError() {
        if (dataSourceCheckbox.isSelected() && dataSourceList.getSelectedValuesList().isEmpty()) {
            return "At least one size must be selected";
        }
        return null;
    }

    @Override
    FileSearchFiltering.FileFilter getFilter() {
        if (dataSourceCheckbox.isSelected()) {
            List<DataSource> dataSources = dataSourceList.getSelectedValuesList().stream().map(t -> t.getDataSource()).collect(Collectors.toList());
            return new FileSearchFiltering.DataSourceFilter(dataSources);
        }
        return null;
    }
}
