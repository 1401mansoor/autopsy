/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.discovery;

import java.util.List;
import java.util.logging.Level;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.datamodel.BlackboardArtifact;
import org.sleuthkit.datamodel.BlackboardAttribute;
import org.sleuthkit.datamodel.TskCoreException;

/**
 *
 * @author wschaefer
 */
public class ObjectDetectedFilterPanel extends AbstractDiscoveryFilterPanel {

    private static final long serialVersionUID = 1L;
    private final static Logger logger = Logger.getLogger(ObjectDetectedFilterPanel.class.getName());

    /**
     * Creates new form ObjectDetectedFilter
     */
    public ObjectDetectedFilterPanel() {
        initComponents();
        setUpObjectFilter();
    }

    /**
     * Initialize the object filter
     */
    private void setUpObjectFilter() {
        int count = 0;
        try {
            DefaultListModel<String> objListModel = (DefaultListModel<String>) objectsList.getModel();
            objListModel.removeAllElements();
            List<String> setNames = DiscoveryUiUtils.getSetNames(BlackboardArtifact.ARTIFACT_TYPE.TSK_OBJECT_DETECTED, BlackboardAttribute.ATTRIBUTE_TYPE.TSK_DESCRIPTION);
            for (String name : setNames) {
                objListModel.add(count, name);
                count++;
            }
        } catch (TskCoreException ex) {
            logger.log(Level.SEVERE, "Error loading object detected set names", ex);
            objectsCheckbox.setEnabled(false);
            objectsList.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        objectsCheckbox = new javax.swing.JCheckBox();
        objectsScrollPane = new javax.swing.JScrollPane();
        objectsList = new javax.swing.JList<>();

        org.openide.awt.Mnemonics.setLocalizedText(objectsCheckbox, org.openide.util.NbBundle.getMessage(ObjectDetectedFilterPanel.class, "ObjectDetectedFilterPanel.text")); // NOI18N
        objectsCheckbox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        objectsCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        objectsCheckbox.setMaximumSize(new java.awt.Dimension(103, 25));
        objectsCheckbox.setMinimumSize(new java.awt.Dimension(103, 25));
        objectsCheckbox.setName(""); // NOI18N
        objectsCheckbox.setPreferredSize(new java.awt.Dimension(103, 25));
        objectsCheckbox.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        objectsCheckbox.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        objectsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectsCheckboxActionPerformed(evt);
            }
        });

        setMinimumSize(new java.awt.Dimension(200, 30));
        setPreferredSize(new java.awt.Dimension(300, 60));

        objectsScrollPane.setMinimumSize(new java.awt.Dimension(0, 0));
        objectsScrollPane.setName(""); // NOI18N
        objectsScrollPane.setPreferredSize(new java.awt.Dimension(260, 50));

        objectsList.setModel(new DefaultListModel<String>());
        objectsList.setEnabled(false);
        objectsList.setVisibleRowCount(2);
        objectsScrollPane.setViewportView(objectsList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(objectsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(objectsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void objectsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectsCheckboxActionPerformed
        objectsList.setEnabled(objectsCheckbox.isSelected());
    }//GEN-LAST:event_objectsCheckboxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox objectsCheckbox;
    private javax.swing.JList<String> objectsList;
    private javax.swing.JScrollPane objectsScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    void configurePanel(boolean selected, int[] indicesSelected) {
        boolean hasObjects = objectsList.getModel().getSize() > 0;
        objectsCheckbox.setEnabled(hasObjects);
        objectsCheckbox.setSelected(selected && hasObjects);
        if (objectsCheckbox.isEnabled() && objectsCheckbox.isSelected()) {
            objectsScrollPane.setEnabled(true);
            objectsList.setEnabled(true);
            if (indicesSelected != null) {
                objectsList.setSelectedIndices(indicesSelected);
            }
        } else {
            objectsScrollPane.setEnabled(false);
            objectsList.setEnabled(false);
        }
    }

    @Override
    JCheckBox getCheckbox() {
        return objectsCheckbox;
    }

    @Override
    JLabel getAdditionalLabel() {
        return null;
    }

    @Override
    String checkForError() {
        if (objectsCheckbox.isSelected() && objectsList.getSelectedValuesList().isEmpty()) {
            return "At least one object type name must be selected";
        }
        return null;
    }

    @Override
    JList<?> getList() {
        return objectsList;
    }

    @Override
    FileSearchFiltering.FileFilter getFilter() {
        if (objectsCheckbox.isSelected()) {
            return new FileSearchFiltering.ObjectDetectionFilter(objectsList.getSelectedValuesList());
        }
        return null;
    }

}
