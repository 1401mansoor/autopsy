/*
 * Autopsy
 *
 * Copyright 2020 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.discovery.ui;

import org.sleuthkit.autopsy.discovery.search.AbstractFilter;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import org.sleuthkit.autopsy.discovery.search.AttributeSearchData;
import org.sleuthkit.datamodel.BlackboardArtifact;

/**
 * Filter for selection of a specific Artifact type to limit results to.
 */
class ArtifactTypeFilterPanel extends AbstractDiscoveryFilterPanel {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form ArtifactTypeFilterPanel
     */
    ArtifactTypeFilterPanel() {
        initComponents();
        setUpArtifactTypeFilter();

    }

    /**
     * Initialize the data source filter.
     */
    private void setUpArtifactTypeFilter() {
        int count = 0;
        DefaultListModel<ArtifactTypeItem> artifactTypeModel = (DefaultListModel<ArtifactTypeItem>) jList1.getModel();
        artifactTypeModel.removeAllElements();
        for (BlackboardArtifact.ARTIFACT_TYPE artifactType : AttributeSearchData.AttributeType.DOMAIN.getBlackboardTypes()) {
            artifactTypeModel.add(count, new ArtifactTypeItem(artifactType));
            count++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        artifactTypeCheckbox = new javax.swing.JCheckBox();
        artifactTypeScrollPane = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        org.openide.awt.Mnemonics.setLocalizedText(artifactTypeCheckbox, org.openide.util.NbBundle.getMessage(ArtifactTypeFilterPanel.class, "ArtifactTypeFilterPanel.artifactTypeCheckbox.text")); // NOI18N

        setPreferredSize(new java.awt.Dimension(27, 27));

        artifactTypeScrollPane.setPreferredSize(new java.awt.Dimension(27, 27));

        jList1.setModel(new DefaultListModel<ArtifactTypeItem>());
        jList1.setEnabled(false);
        artifactTypeScrollPane.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(artifactTypeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(artifactTypeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    void configurePanel(boolean selected, int[] indicesSelected) {
        artifactTypeCheckbox.setSelected(selected);
    }

    @Override
    JCheckBox getCheckbox() {
        return artifactTypeCheckbox;
    }

    @Override
    JList<?> getList() {
        return null;
    }

    @Override
    JLabel getAdditionalLabel() {
        return null;
    }

    @Override
    String checkForError() {
        return "Domain search is not implemented.";
    }

    @Override
    AbstractFilter getFilter() {
        return null;
    }

    /**
     * Utility class to allow us to display the AritfactType display name
     * instead of the name.
     */
    private class ArtifactTypeItem {

        private final BlackboardArtifact.ARTIFACT_TYPE artifactType;

        /**
         * Construct a new ArtifactTypeItem.
         *
         * @param ds The artifact type being wrapped.
         */
        ArtifactTypeItem(BlackboardArtifact.ARTIFACT_TYPE artifactType) {
            this.artifactType = artifactType;
        }

        /**
         * Get the ArtifactType represented by this ArtifactTypeItem.
         *
         * @return The ArtifactType represented by this ArtifactTypeItem.
         */
        BlackboardArtifact.ARTIFACT_TYPE getArtifactType() {
            return artifactType;
        }

        @Override
        public String toString() {
            return artifactType.getDisplayName();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox artifactTypeCheckbox;
    private javax.swing.JScrollPane artifactTypeScrollPane;
    private javax.swing.JList<ArtifactTypeItem> jList1;
    // End of variables declaration//GEN-END:variables
}
