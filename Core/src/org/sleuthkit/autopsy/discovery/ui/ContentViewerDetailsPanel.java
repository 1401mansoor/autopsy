/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sleuthkit.autopsy.discovery.ui;

import java.util.logging.Level;
import org.openide.nodes.Node;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.autopsy.corecomponents.DataContentPanel;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.autopsy.datamodel.BlackboardArtifactNode;
import org.sleuthkit.autopsy.datamodel.FileNode;
import org.sleuthkit.datamodel.BlackboardArtifact;
import org.sleuthkit.datamodel.BlackboardAttribute;
import static org.sleuthkit.datamodel.BlackboardAttribute.ATTRIBUTE_TYPE.TSK_PATH_ID;
import org.sleuthkit.datamodel.TskCoreException;

/**
 * Details panel for displaying the collection of content viewers.
 */
class ContentViewerDetailsPanel extends AbstractArtifactDetailsPanel {

    private static final long serialVersionUID = 1L;
    private final static Logger logger = Logger.getLogger(ContentViewerDetailsPanel.class.getName());
    private final DataContentPanel contentViewer = DataContentPanel.createInstance();

    /**
     * Creates new form ContentViewerDetailsPanel
     */
    ContentViewerDetailsPanel() {
        initComponents();
        add(contentViewer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void setArtifact(BlackboardArtifact artifact) {
        Node node = Node.EMPTY;
        if (artifact != null) {
            if (artifact.getArtifactTypeID() == BlackboardArtifact.ARTIFACT_TYPE.TSK_WEB_CACHE.getTypeID()) {
                try {
                    for (BlackboardAttribute attr : artifact.getAttributes()) {
                        if (attr.getAttributeType().getTypeID() == TSK_PATH_ID.getTypeID()) {
                            node = new FileNode(Case.getCurrentCase().getSleuthkitCase().getAbstractFileById(attr.getValueLong()));
                            break;
                        }
                    }
                } catch (TskCoreException ex) {
                    logger.log(Level.WARNING, "Unable to retrieve attributes for artifact with ID: " + artifact.getArtifactID(), ex);
                }
            }
            if (node.equals(Node.EMPTY)) {
                node = new BlackboardArtifactNode(artifact);
            }

        }
        contentViewer.setNode(node);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
