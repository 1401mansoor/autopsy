/*
 * Autopsy
 *
 * Copyright 2020 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.discovery.ui;

import java.util.Collections;
import org.sleuthkit.autopsy.discovery.search.AbstractFilter;
import java.util.List;
import java.util.logging.Level;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.event.ListSelectionListener;
import org.openide.util.NbBundle;
import org.sleuthkit.autopsy.casemodule.Case;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.autopsy.coreutils.ThreadConfined;
import org.sleuthkit.autopsy.discovery.search.SearchFiltering;
import org.sleuthkit.autopsy.guiutils.CheckBoxListPanel;
import org.sleuthkit.datamodel.DataSource;
import org.sleuthkit.datamodel.TskCoreException;

/**
 * A panel which displays the controls for the Data Source Filter.
 */
final class DataSourceFilterPanel extends AbstractDiscoveryFilterPanel {

    private static final long serialVersionUID = 1L;
    private final static Logger logger = Logger.getLogger(DataSourceFilterPanel.class.getName());
    private final CheckBoxListPanel<DataSource> dataSourceCheckBoxList = new CheckBoxListPanel<>();

    /**
     * Creates new form DataSourceFilterPanel.
     */
    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    DataSourceFilterPanel() {
        initComponents();
        setUpDataSourceFilter();
        add(dataSourceCheckBoxList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataSourceCheckbox = new javax.swing.JCheckBox();
        selectAllButton = new javax.swing.JButton();
        deselectAllButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(dataSourceCheckbox, org.openide.util.NbBundle.getMessage(DataSourceFilterPanel.class, "DataSourceFilterPanel.dataSourceCheckbox.text")); // NOI18N
        dataSourceCheckbox.setMaximumSize(new java.awt.Dimension(150, 25));
        dataSourceCheckbox.setMinimumSize(new java.awt.Dimension(150, 25));
        dataSourceCheckbox.setPreferredSize(new java.awt.Dimension(150, 25));
        dataSourceCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataSourceCheckboxActionPerformed(evt);
            }
        });

        setMinimumSize(new java.awt.Dimension(250, 30));
        setPreferredSize(new java.awt.Dimension(250, 50));
        setRequestFocusEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(selectAllButton, org.openide.util.NbBundle.getMessage(DataSourceFilterPanel.class, "DataSourceFilterPanel.selectAllButton.text")); // NOI18N
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(deselectAllButton, org.openide.util.NbBundle.getMessage(DataSourceFilterPanel.class, "DataSourceFilterPanel.deselectAllButton.text")); // NOI18N
        deselectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(selectAllButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deselectAllButton)
                .addGap(0, 45, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deselectAllButton, selectAllButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectAllButton)
                    .addComponent(deselectAllButton))
                .addGap(6, 6, 6))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deselectAllButton, selectAllButton});

    }// </editor-fold>//GEN-END:initComponents

    private void dataSourceCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataSourceCheckboxActionPerformed
        dataSourceCheckBoxList.setEnabled(dataSourceCheckbox.isSelected());
        selectAllButton.setEnabled(dataSourceCheckbox.isSelected());
        deselectAllButton.setEnabled(dataSourceCheckbox.isSelected());
    }//GEN-LAST:event_dataSourceCheckboxActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        dataSourceCheckBoxList.setSetAllSelected(true);
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void deselectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectAllButtonActionPerformed
        dataSourceCheckBoxList.setSetAllSelected(false);
    }//GEN-LAST:event_deselectAllButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox dataSourceCheckbox;
    private javax.swing.JButton deselectAllButton;
    private javax.swing.JButton selectAllButton;
    // End of variables declaration//GEN-END:variables

    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    @Override
    void configurePanel(boolean selected, int[] indicesSelected) {
        dataSourceCheckbox.setSelected(selected);
        if (dataSourceCheckbox.isEnabled() && dataSourceCheckbox.isSelected()) {
            dataSourceCheckBoxList.setEnabled(true);
//            if (indicesSelected != null) {
//                dataSourceCheckBoxList.setSelectedIndices(indicesSelected);
//            }
        } else {
            dataSourceCheckBoxList.setEnabled(false);
        }
    }

    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    @Override
    JCheckBox getCheckbox() {
        return dataSourceCheckbox;
    }

    @Override
    JLabel getAdditionalLabel() {
        return null;
    }

    /**
     * Initialize the data source filter.
     */
    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    private void setUpDataSourceFilter() {
        try {
            dataSourceCheckBoxList.clearList();
            List<DataSource> dataSources = Case.getCurrentCase().getSleuthkitCase().getDataSources();
            Collections.sort(dataSources, (DataSource ds1, DataSource ds2) -> ds1.getName().compareToIgnoreCase(ds2.getName()));
            for (DataSource ds : dataSources) {
                dataSourceCheckBoxList.addElement(ds.getName() + " (ID: " + ds.getId() + ")", null, ds);
            }

        } catch (TskCoreException ex) {
            logger.log(Level.SEVERE, "Error loading data sources", ex);
            dataSourceCheckbox.setEnabled(false);
            dataSourceCheckBoxList.setEnabled(false);
        }
    }

    @Override
    ListSelectionListener[] getListSelectionListeners() {
        return dataSourceCheckBoxList.getListSelectionListeners();
    }

    @Override
    void addListSelectionListener(ListSelectionListener listener) {
        dataSourceCheckBoxList.addListSelectionListener(listener);
    }

    @Override
    void removeListSelectionListener(ListSelectionListener listener) {
        dataSourceCheckBoxList.removeListSelectionListener(listener);
    }

    @Override
    boolean isFilterSupported() {
        return !dataSourceCheckBoxList.isEmpty();
    }

    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    @NbBundle.Messages({"DataSourceFilterPanel.error.text=At least one data source must be selected."})
    @Override
    String checkForError() {
        if (dataSourceCheckbox.isSelected() && dataSourceCheckBoxList.getSelectedElements().isEmpty()) {
            return Bundle.DataSourceFilterPanel_error_text();
        }
        return "";
    }

    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    @Override
    void removeListeners() {
        super.removeListeners();
        if (dataSourceCheckBoxList != null) {
            for (ListSelectionListener listener : getListSelectionListeners()) {
                dataSourceCheckBoxList.removeListSelectionListener(listener);
            }
        }
    }

    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    @Override
    AbstractFilter getFilter() {
        if (dataSourceCheckbox.isSelected()) {
            List<DataSource> dataSources = dataSourceCheckBoxList.getSelectedElements();
            return new SearchFiltering.DataSourceFilter(dataSources);
        }
        return null;
    }

}
