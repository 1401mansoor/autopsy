/*
 * Autopsy
 *
 * Copyright 2020 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.discovery.ui;

import com.google.common.eventbus.Subscribe;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.sleuthkit.autopsy.contentviewers.artifactviewers.ArtifactContentViewer;
import org.sleuthkit.autopsy.discovery.search.DiscoveryEventUtils;
import org.sleuthkit.datamodel.BlackboardArtifact;

/**
 *
 * @author wschaefer
 */
public final class DomainArtifactsTabPanel extends javax.swing.JSplitPane {

    private static final long serialVersionUID = 1L;
    private final ArtifactsListPanel listPanel = new ArtifactsListPanel();
    private final BlackboardArtifact.ARTIFACT_TYPE artifactType;
    private AbstractArtifactDetailsPanel rightPanel = null;

    /**
     * Creates new form CookiesPanel
     */
    public DomainArtifactsTabPanel(BlackboardArtifact.ARTIFACT_TYPE artifactType) {
        initComponents();
        this.artifactType = artifactType;
        this.setLeftComponent(listPanel);
        setRightComponent();
        update();
    }

    private void setRightComponent() {
       
        switch (artifactType) {
            case TSK_WEB_COOKIE:
                rightPanel = new CookieDetailsPanel();
                break;
            default:
                break;
        }
        if (rightPanel == null) {
            getComponent(1).setVisible(false);
            getComponent(2).setVisible(false);
        } else {
            this.setRightComponent(rightPanel);
            getComponent(1).setVisible(true);
            getComponent(2).setVisible(true);
        }
    }

    private void update() {
        this.setEnabled(!this.listPanel.isEmpty());
    }

    @Subscribe
    void handleArtifactListRetrievedEvent(DiscoveryEventUtils.ArtifactListRetrievedEvent artifactListEvent) {
        if (artifactType == artifactListEvent.getArtifactType()) {
            listPanel.addArtifacts(artifactListEvent.getListOfArtifacts());
            listPanel.addSelectionListener(new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent event) {
                    if (!event.getValueIsAdjusting()){
                        rightPanel.setArtifact(listPanel.getSelectedArtifact());
                    }
                }
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
