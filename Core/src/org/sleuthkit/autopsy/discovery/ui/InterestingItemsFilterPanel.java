/*
 * Autopsy
 *
 * Copyright 2020 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.discovery.ui;

import org.sleuthkit.autopsy.discovery.search.AbstractFilter;
import java.util.List;
import java.util.logging.Level;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.event.ListSelectionListener;
import org.openide.util.NbBundle;
import org.sleuthkit.autopsy.coreutils.Logger;
import org.sleuthkit.autopsy.coreutils.ThreadConfined;
import org.sleuthkit.autopsy.discovery.search.SearchFiltering;
import org.sleuthkit.autopsy.guiutils.CheckBoxListPanel;
import org.sleuthkit.datamodel.BlackboardArtifact;
import org.sleuthkit.datamodel.BlackboardAttribute;
import org.sleuthkit.datamodel.TskCoreException;

/**
 * Class to allow configuration of the Interesting Items filter.
 */
final class InterestingItemsFilterPanel extends AbstractDiscoveryFilterPanel {

    private static final long serialVersionUID = 1L;
    private final static Logger logger = Logger.getLogger(InterestingItemsFilterPanel.class.getName());
    private static final CheckBoxListPanel<String> interestingItemsList = new CheckBoxListPanel<>();

    /**
     * Creates new form InterestingItemsFilterPanel.
     */
    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    InterestingItemsFilterPanel() {
        initComponents();
        setUpInterestingItemsFilter();
        add(interestingItemsList);
    }

    /**
     * Initialize the interesting items filter.
     */
    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    private void setUpInterestingItemsFilter() {
        try {
            interestingItemsList.clearList();
            List<String> setNames = DiscoveryUiUtils.getSetNames(BlackboardArtifact.ARTIFACT_TYPE.TSK_INTERESTING_FILE_HIT,
                    BlackboardAttribute.ATTRIBUTE_TYPE.TSK_SET_NAME);
            for (String name : setNames) {
                interestingItemsList.addElement(name, null, name);
            }
        } catch (TskCoreException ex) {
            logger.log(Level.SEVERE, "Error loading interesting file set names", ex);
            interestingItemsCheckbox.setEnabled(false);
            interestingItemsList.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        interestingItemsCheckbox = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(interestingItemsCheckbox, org.openide.util.NbBundle.getMessage(InterestingItemsFilterPanel.class, "InterestingItemsFilterPanel.interestingItemsCheckbox.text")); // NOI18N
        interestingItemsCheckbox.setMaximumSize(new java.awt.Dimension(150, 25));
        interestingItemsCheckbox.setMinimumSize(new java.awt.Dimension(150, 25));
        interestingItemsCheckbox.setPreferredSize(new java.awt.Dimension(150, 25));
        interestingItemsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interestingItemsCheckboxActionPerformed(evt);
            }
        });

        setMinimumSize(new java.awt.Dimension(250, 30));
        setPreferredSize(new java.awt.Dimension(250, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void interestingItemsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interestingItemsCheckboxActionPerformed
        interestingItemsList.setEnabled(interestingItemsCheckbox.isSelected());
    }//GEN-LAST:event_interestingItemsCheckboxActionPerformed

    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    @Override
    void configurePanel(boolean selected, int[] indicesSelected) {
        boolean hasInterestingItems = isFilterSupported();
        interestingItemsCheckbox.setEnabled(hasInterestingItems);
        interestingItemsCheckbox.setSelected(selected && hasInterestingItems);
        if (interestingItemsCheckbox.isEnabled() && interestingItemsCheckbox.isSelected()) {
            interestingItemsList.setEnabled(true);
//            if (indicesSelected != null) {
//                interestingItemsList.setSelectedIndices(indicesSelected);
//            }
        } else {
            interestingItemsList.setEnabled(false);
        }
    }

    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    @Override
    JCheckBox getCheckbox() {
        return interestingItemsCheckbox;
    }

    @Override
    JLabel getAdditionalLabel() {
        return null;
    }

    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    @NbBundle.Messages({"InterestingItemsFilterPanel.error.text=At least one interesting file set name must be selected."})
    @Override
    String checkForError() {
        if (interestingItemsCheckbox.isSelected() && interestingItemsList.getSelectedElements().isEmpty()) {
            return Bundle.InterestingItemsFilterPanel_error_text();
        }
        return "";
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox interestingItemsCheckbox;
    // End of variables declaration//GEN-END:variables

    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    @Override
    AbstractFilter getFilter() {
        if (interestingItemsCheckbox.isSelected()) {
            List<String> itemsList = interestingItemsList.getSelectedElements();
            return new SearchFiltering.InterestingFileSetFilter(itemsList);
        }
        return null;
    }

    @ThreadConfined(type = ThreadConfined.ThreadType.AWT)
    @Override
    void removeListeners() {
        super.removeListeners();
        if (interestingItemsList != null) {
            for (ListSelectionListener listener : getListSelectionListeners()) {
                interestingItemsList.removeListSelectionListener(listener);
            }
        }
    }

    @Override
    ListSelectionListener[] getListSelectionListeners() {
        return interestingItemsList.getListSelectionListeners();
    }

    @Override
    void addListSelectionListener(ListSelectionListener listener) {
        interestingItemsList.addListSelectionListener(listener);
    }

    @Override
    void removeListSelectionListener(ListSelectionListener listener) {
        interestingItemsList.removeListSelectionListener(listener);
    }

    @Override
    boolean isFilterSupported() {
        return !interestingItemsList.isEmpty();
    }
}
